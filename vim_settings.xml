<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="/File Header.txt.ft" timestamp="1539141430074">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/DigitalAssertManagerTest.java" timestamp="1539952919922">
        <mark key="[" line="7" column="0" />
        <mark key="]" line="8" column="17" />
        <mark key="^" line="8" column="17" />
        <mark key="." line="8" column="17" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/dao/response/Httpbin_GET_Obj.java" timestamp="1540014817776">
        <mark key="[" line="18" column="0" />
        <mark key="]" line="18" column="39" />
        <mark key="^" line="18" column="13" />
        <mark key="." line="18" column="13" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/log4j2.yml" timestamp="1540006830921">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="44" column="18" />
        <mark key="^" line="44" column="18" />
        <mark key="." line="44" column="18" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/static/log4j2.yaml" timestamp="1540011549388">
        <mark key="[" line="18" column="22" />
        <mark key="]" line="18" column="22" />
        <mark key="^" line="18" column="22" />
        <mark key="." line="18" column="22" />
      </file>
      <file name="/a.dummy" timestamp="1540054739322">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/Components/SwaggerConfig.java" timestamp="1540064181159">
        <mark key="[" line="25" column="0" />
        <mark key="]" line="25" column="0" />
        <mark key="." line="25" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/java/com/zhiri/qu_voice_java/Controller/package-info.java" timestamp="1538197762713">
        <mark key="[" line="0" column="43" />
        <mark key="]" line="1" column="13" />
        <mark key="^" line="1" column="13" />
        <mark key="." line="1" column="13" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/java/com/zhiri/qu_voice_java/ServletInitializer.java" timestamp="1538197771615">
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="0" />
        <mark key="^" line="11" column="0" />
        <mark key="." line="11" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/rest/HttpbinAPI.java" timestamp="1540007810168">
        <mark key="[" line="13" column="27" />
        <mark key="]" line="17" column="14" />
        <mark key="." line="17" column="14" />
        <mark key="^" line="17" column="14" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" timestamp="1539836230244">
        <mark key="[" line="71" column="42" />
        <mark key="]" line="71" column="40" />
        <mark key="." line="71" column="40" />
        <mark key="^" line="71" column="40" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/DTO/Country.java" timestamp="1540054737254">
        <mark key="[" line="13" column="13" />
        <mark key="]" line="13" column="19" />
        <mark key="." line="13" column="19" />
        <mark key="^" line="13" column="19" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/domaIn/People.java" timestamp="1540062508819">
        <mark key="[" line="17" column="17" />
        <mark key="]" line="19" column="5" />
        <mark key="^" line="19" column="5" />
        <mark key="." line="19" column="5" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/OrderedTests.java" timestamp="1539940859986">
        <mark key="[" line="13" column="36" />
        <mark key="]" line="13" column="43" />
        <mark key="." line="13" column="43" />
        <mark key="^" line="13" column="43" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/DTO/PeopleRepository.java" timestamp="1540056232190">
        <mark key="[" line="17" column="30" />
        <mark key="]" line="17" column="40" />
        <mark key="." line="17" column="40" />
        <mark key="^" line="17" column="40" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/log4j2.yaml" timestamp="1540013989082">
        <mark key="'" line="37" column="13" />
        <mark key="[" line="42" column="18" />
        <mark key="]" line="42" column="17" />
        <mark key="^" line="42" column="17" />
        <mark key="." line="42" column="17" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/Controller/HttpbinController.java" timestamp="1540063735066">
        <mark key="[" line="70" column="0" />
        <mark key="]" line="70" column="0" />
        <mark key="." line="70" column="0" />
        <mark key="^" line="69" column="6" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/rest/HttpbinAPIService.java" timestamp="1540022877303">
        <mark key="[" line="17" column="0" />
        <mark key="]" line="17" column="0" />
        <mark key="." line="17" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/main/java/Tmp.java" timestamp="1539932516249">
        <mark key="[" line="6" column="0" />
        <mark key="]" line="8" column="0" />
        <mark key="." line="8" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/README.md" timestamp="1538196993554">
        <mark key="[" line="6" column="6" />
        <mark key="]" line="6" column="4" />
        <mark key="^" line="6" column="4" />
        <mark key="." line="6" column="4" />
      </file>
      <file name="/ActionScript File Header.txt.ft" timestamp="1539141428189">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/guavademo/src/test/java/Guava/BasicUtilitiesTest.java" timestamp="1540201321617">
        <mark key="[" line="19" column="32" />
        <mark key="]" line="30" column="43" />
        <mark key="." line="30" column="43" />
        <mark key="^" line="30" column="43" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/Controller/CustomController.java" timestamp="1540048951728">
        <mark key="[" line="21" column="0" />
        <mark key="]" line="21" column="0" />
        <mark key="." line="21" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/resources/application.properties" timestamp="1539836306954">
        <mark key="[" line="5" column="3" />
        <mark key="]" line="5" column="5" />
        <mark key="^" line="5" column="5" />
        <mark key="." line="5" column="5" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/RetrofitSwaggerApplication.java" timestamp="1540042046706">
        <mark key="[" line="7" column="0" />
        <mark key="]" line="7" column="15" />
        <mark key="." line="7" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/TmpTest.java" timestamp="1539932746473">
        <mark key="[" line="7" column="44" />
        <mark key="]" line="7" column="29" />
        <mark key="^" line="7" column="29" />
        <mark key="." line="7" column="29" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/AggregatingTests.java" timestamp="1539940782842">
        <mark key="[" line="16" column="25" />
        <mark key="]" line="9" column="25" />
        <mark key="^" line="9" column="25" />
        <mark key="." line="9" column="25" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/java/com/zhiri/qu_voice_java/Service/AliService.java" timestamp="1540010963106">
        <mark key="[" line="44" column="42" />
        <mark key="]" line="127" column="29" />
        <mark key="." line="127" column="29" />
        <mark key="^" line="127" column="29" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/ExpectedExceptionTests.java" timestamp="1539937062818">
        <mark key="[" line="25" column="0" />
        <mark key="]" line="25" column="0" />
        <mark key="." line="25" column="0" />
        <mark key="^" line="4" column="36" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/pom.xml" timestamp="1540051434713">
        <mark key="[" line="63" column="0" />
        <mark key="]" line="67" column="21" />
        <mark key="^" line="63" column="12" />
        <mark key="." line="63" column="12" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/guavademo/src/main/java/BasicUtilities/package-info.java" timestamp="1540179466186">
        <mark key="]" line="0" column="62" />
        <mark key="^" line="0" column="62" />
        <mark key="." line="0" column="62" />
      </file>
      <file name="/Arquillian Deployment Method.txt.ft" timestamp="1539141431429">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/guavademo/pom.xml" timestamp="1540179778757">
        <mark key="[" line="19" column="0" />
        <mark key="]" line="19" column="20" />
        <mark key="^" line="25" column="0" />
        <mark key="." line="19" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/pom.xml" timestamp="1539931196144">
        <mark key="[" line="27" column="21" />
        <mark key="]" line="35" column="0" />
        <mark key="^" line="35" column="0" />
        <mark key="." line="35" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/playground/java_novice/pom.xml" timestamp="1539078888145">
        <mark key="[" line="19" column="0" />
        <mark key="]" line="10" column="0" />
        <mark key="." line="10" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/upload.sh" timestamp="1539334385187">
        <mark key="[" line="3" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/main/java/JunitDemo/List.java" timestamp="1539947375671">
        <mark key="[" line="8" column="16" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/data.sql" timestamp="1540056291632">
        <mark key="'" line="2" column="17" />
        <mark key="[" line="0" column="45" />
        <mark key="]" line="0" column="46" />
        <mark key="^" line="0" column="46" />
        <mark key="." line="0" column="46" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/src/main/java/AI/Voice/MscVoiceCompose.java" timestamp="1539243624222">
        <mark key="[" line="8" column="0" />
        <mark key="]" line="8" column="0" />
        <mark key="." line="8" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/main/java/JunitDemo/Tmp.java" timestamp="1539932962016">
        <mark key="[" line="15" column="61" />
        <mark key="]" line="16" column="50" />
        <mark key="^" line="16" column="50" />
        <mark key="." line="16" column="50" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/pom.xml" timestamp="1540173480138">
        <mark key="'" line="132" column="0" />
        <mark key="[" line="104" column="0" />
        <mark key="]" line="115" column="18" />
        <mark key="^" line="115" column="18" />
        <mark key="." line="115" column="18" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/Example.java" timestamp="1540017935831">
        <mark key="'" line="40" column="0" />
        <mark key="[" line="19" column="0" />
        <mark key="]" line="20" column="0" />
        <mark key="^" line="20" column="0" />
        <mark key="." line="20" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/log4j2.json" timestamp="1540011982072">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/main/java/Caculator.java" timestamp="1539930544707">
        <mark key="[" line="6" column="0" />
        <mark key="]" line="15" column="0" />
        <mark key="." line="15" column="0" />
        <mark key="^" line="15" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/resources/log4j2.xml" timestamp="1540011268206">
        <mark key="[" line="21" column="15" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/log4j2.xml" timestamp="1540011597459">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="39" column="25" />
        <mark key="." line="39" column="25" />
        <mark key="^" line="39" column="25" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/src/main/java/com/mrboxfood/lightwork/Service/LightWorkWechatService.java" timestamp="1540023166861">
        <mark key="[" line="131" column="23" />
        <mark key="]" line="131" column="22" />
        <mark key="^" line="131" column="22" />
        <mark key="." line="131" column="22" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/guavademo/src/main/java/Guava/BasicUtilities.java" timestamp="1540191477956">
        <mark key="[" line="15" column="56" />
        <mark key="]" line="15" column="30" />
        <mark key="^" line="15" column="30" />
        <mark key="." line="15" column="30" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/Controller/UnusedController.java" timestamp="1540062234671">
        <mark key="[" line="27" column="0" />
        <mark key="]" line="27" column="0" />
        <mark key="." line="27" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/src/main/java/AI/package-info.java" timestamp="1539236314575">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="1" column="6" />
        <mark key="^" line="1" column="6" />
        <mark key="." line="1" column="6" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/src/test/java/AI/Voice/MscVoiceComposeTest.java" timestamp="1539421464967">
        <mark key="[" line="13" column="25" />
        <mark key="]" line="14" column="0" />
        <mark key="." line="14" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/Java/log4jdemo/src/main/resources/log4j2.xml" timestamp="1538198122901">
        <mark key="[" line="22" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/guavademo/src/main/java/Guava/ArrayBlockingQueue.java" timestamp="1540201480804">
        <mark key="[" line="148" column="9" />
        <mark key="]" line="149" column="19" />
        <mark key="." line="149" column="19" />
        <mark key="^" line="149" column="19" />
      </file>
      <file name="/HTML File.txt.ft" timestamp="1539141557137">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/application.properties" timestamp="1540054649801">
        <mark key="[" line="1" column="35" />
        <mark key="]" line="2" column="28" />
        <mark key="." line="2" column="28" />
        <mark key="^" line="2" column="28" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/src/main/java/AI/Voice/package-info.java" timestamp="1539236343120">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="1" column="12" />
        <mark key="^" line="1" column="12" />
        <mark key="." line="1" column="12" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/test/java/com/zhiri/qu_voice_java/Service/AliServiceTest.java" timestamp="1539919061316">
        <mark key="[" line="19" column="14" />
        <mark key="]" line="3" column="0" />
        <mark key="." line="3" column="0" />
        <mark key="^" line="3" column="0" />
      </file>
      <file name="/Dummy.txt" timestamp="1540064191117">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/TestFixturesExample.java" timestamp="1539969363022">
        <mark key="[" line="8" column="0" />
        <mark key="]" line="71" column="0" />
        <mark key="." line="71" column="0" />
        <mark key="^" line="71" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/log4j.xml" timestamp="1540010768176">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="21" column="15" />
        <mark key="^" line="21" column="15" />
        <mark key="." line="21" column="15" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/playground/java_novice/src/test/java/JavaStandardModuleLearning/JavaFutureTest.java" timestamp="1539090985605">
        <mark key="[" line="14" column="47" />
        <mark key="]" line="14" column="70" />
        <mark key="^" line="14" column="70" />
        <mark key="." line="14" column="70" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/Service/HttpbinService.java" timestamp="1540003452114">
        <mark key="[" line="15" column="19" />
        <mark key="]" line="15" column="18" />
        <mark key="^" line="15" column="18" />
        <mark key="." line="15" column="18" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/java/com/zhiri/qu_voice_java/rest/SppechInit.java" timestamp="1538207029862">
        <mark key="[" line="17" column="0" />
        <mark key="]" line="17" column="0" />
        <mark key="." line="17" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/src/main/java/com/mrboxfood/lightwork/dto/MyResponse.java" timestamp="1540002339379">
        <mark key="[" line="11" column="4" />
        <mark key="]" line="11" column="4" />
        <mark key="^" line="11" column="4" />
        <mark key="." line="11" column="4" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/src/main/java/com/mrboxfood/MyWebConfig.java" timestamp="1538967235364">
        <mark key="[" line="17" column="56" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/websockets/pom.xml" timestamp="1539773450690">
        <mark key="[" line="20" column="0" />
        <mark key="]" line="20" column="0" />
        <mark key="^" line="28" column="16" />
        <mark key="." line="20" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/Tmp.java" timestamp="1540008658737">
        <mark key="[" line="19" column="15" />
        <mark key="]" line="31" column="16" />
        <mark key="." line="31" column="16" />
        <mark key="^" line="31" column="16" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/SpringfoxExample.java" timestamp="1540041613275">
        <mark key="'" line="133" column="0" />
        <mark key="[" line="34" column="0" />
        <mark key="]" line="34" column="0" />
        <mark key="^" line="133" column="0" />
        <mark key="." line="34" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/static/log4j2.xml" timestamp="1540012441613">
        <mark key="[" line="19" column="6" />
        <mark key="]" line="11" column="15" />
        <mark key="^" line="11" column="15" />
        <mark key="." line="11" column="15" />
      </file>
      <file name="/Class.txt.ft" timestamp="1539141558667">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/schema.sql" timestamp="1540054799532">
        <mark key="[" line="0" column="20" />
        <mark key="]" line="0" column="18" />
        <mark key="^" line="0" column="18" />
        <mark key="." line="0" column="18" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/guavademo/src/main/java/Guava/package-info.java" timestamp="1540179531840">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="38" />
        <mark key="^" line="0" column="38" />
        <mark key="." line="0" column="38" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/Changelog.md" timestamp="1539056011694">
        <mark key="[" line="10" column="12" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/java/com/zhiri/qu_voice_java/QuVoiceJavaApplication.java" timestamp="1538222398106">
        <mark key="[" line="9" column="44" />
        <mark key="]" line="11" column="44" />
        <mark key="." line="11" column="44" />
        <mark key="^" line="11" column="44" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/README.md" timestamp="1539972289637">
        <mark key="[" line="2" column="82" />
        <mark key="]" line="8" column="9" />
        <mark key="^" line="8" column="9" />
        <mark key="." line="8" column="9" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/dao/response/Httpbin_GET_Obj2.java" timestamp="1540008799774">
        <mark key="[" line="16" column="29" />
        <mark key="]" line="16" column="3" />
        <mark key="^" line="16" column="3" />
        <mark key="." line="16" column="3" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/CalculatorTest.java" timestamp="1539931407351">
        <mark key="[" line="4" column="0" />
        <mark key="]" line="4" column="0" />
        <mark key="." line="4" column="0" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/AssertTests.java" timestamp="1539940809778">
        <mark key="[" line="3" column="22" />
        <mark key="]" line="3" column="20" />
        <mark key="." line="3" column="20" />
        <mark key="^" line="3" column="20" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/rest/HttpbinRestConfig.java" timestamp="1540008088529">
        <mark key="[" line="23" column="5" />
        <mark key="]" line="22" column="48" />
        <mark key="^" line="22" column="48" />
        <mark key="." line="22" column="48" />
      </file>
      <file name="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/DTO/People.java" timestamp="1540054752920">
        <mark key="[" line="22" column="17" />
        <mark key="]" line="22" column="18" />
        <mark key="^" line="22" column="18" />
        <mark key="." line="22" column="18" />
      </file>
      <file name="/fragment.java" timestamp="1540179744635">
        <mark key="[" line="0" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="5" column="0" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/CHANGELOG.md" />
      <jump line="8" column="25" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/java/com/zhiri/qu_voice_java/MyWebConfig.java" />
      <jump line="14" column="10" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/java/com/zhiri/qu_voice_java/MyWebConfig.java" />
      <jump line="39" column="36" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="44" column="36" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="15" column="32" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="38" column="41" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="124" column="19" filename="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/pom.xml" />
      <jump line="15" column="32" filename="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/pom.xml" />
      <jump line="29" column="36" filename="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/pom.xml" />
      <jump line="33" column="36" filename="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/pom.xml" />
      <jump line="37" column="36" filename="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/pom.xml" />
      <jump line="11" column="15" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/resources/log4j2.xml" />
      <jump line="21" column="0" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/resources/log4j2.xml" />
      <jump line="0" column="0" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/resources/log4j2.xml" />
      <jump line="19" column="0" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/java/com/zhiri/qu_voice_java/Controller/TestController.java" />
      <jump line="11" column="0" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/lib/Msc.jar!/com/iflytek/cloud/speech/SpeechUtility.class" />
      <jump line="44" column="0" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/src/main/java/com/zhiri/qu_voice_java/Service/VoiceService.java" />
      <jump line="37" column="39" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="30" column="12" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="82" column="28" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="14" column="21" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="41" column="40" filename="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/pom.xml" />
      <jump line="126" column="34" filename="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/pom.xml" />
      <jump line="29" column="25" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="106" column="31" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="63" column="43" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="103" column="13" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="97" column="44" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="95" column="34" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="85" column="20" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="13" column="11" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="16" column="32" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="23" column="32" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="7" column="5" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="35" column="12" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="99" column="24" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="0" column="0" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="5" column="3" filename="$USER_HOME$/etc/losFiles/projects/playground/java_novice/src/main/java/JavaStandardModuleLearning/JavaFuture.java" />
      <jump line="41" column="29" filename="$USER_HOME$/etc/losFiles/projects/playground/java_novice/src/main/java/JavaStandardModuleLearning/JavaFuture.java" />
      <jump line="1" column="17" filename="$USER_HOME$/etc/losFiles/projects/playground/java_novice/src/main/java/JavaStandardModuleLearning/JavaFuture.java" />
      <jump line="48" column="39" filename="$USER_HOME$/etc/losFiles/projects/playground/java_novice/src/main/java/JavaStandardModuleLearning/JavaFuture.java" />
      <jump line="16" column="0" filename="$USER_HOME$/etc/losFiles/projects/playground/java_novice/src/main/java/JavaStandardModuleLearning/JavaFuture.java" />
      <jump line="37" column="17" filename="$USER_HOME$/etc/losFiles/projects/playground/java_novice/src/main/java/JavaStandardModuleLearning/JavaFuture.java" />
      <jump line="59" column="40" filename="$USER_HOME$/etc/losFiles/projects/playground/java_novice/src/main/java/JavaStandardModuleLearning/JavaFuture.java" />
      <jump line="58" column="26" filename="$USER_HOME$/etc/losFiles/projects/playground/java_novice/src/main/java/JavaStandardModuleLearning/JavaFuture.java" />
      <jump line="32" column="41" filename="$USER_HOME$/etc/losFiles/projects/playground/java_novice/src/main/java/JavaStandardModuleLearning/JavaFuture.java" />
      <jump line="17" column="6" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/.gitignore" />
      <jump line="5" column="11" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/.gitignore" />
      <jump line="0" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/.gitignore" />
      <jump line="41" column="9" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/.gitignore" />
      <jump line="32" column="15" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/pom.xml" />
      <jump line="15" column="6" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/pom.xml" />
      <jump line="18" column="16" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/pom.xml" />
      <jump line="11" column="26" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="32" column="55" filename="$USER_HOME$/etc/losFiles/projects/AI/qu_voice_java/pom.xml" />
      <jump line="20" column="15" filename="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/src/main/resources/application.properties" />
      <jump line="52" column="0" filename="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/src/main/resources/application.properties" />
      <jump line="1744" column="10" filename="/Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/src.zip!/java/lang/Thread.java" />
      <jump line="104" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/main/java/Address.java" />
      <jump line="4" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/AddressTest.java" />
      <jump line="100" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/AddressTest.java" />
      <jump line="101" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/AssertTests.java" />
      <jump line="106" column="1" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/main/java/JunitDemo/Assertions.java" />
      <jump line="28" column="4" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/ExpectedExceptionTests.java" />
      <jump line="37" column="4" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/TimeoutTests.java" />
      <jump line="16" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/TimeoutTests.java" />
      <jump line="31" column="21" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/TimeoutTests.java" />
      <jump line="8" column="16" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/Tmp.java" />
      <jump line="46" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/Tmp.java" />
      <jump line="10" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/Tmp.java" />
      <jump line="11" column="22" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/TimeoutTests.java" />
      <jump line="1" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/Tmp.java" />
      <jump line="70" column="13" filename="/Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/src.zip!/java/util/Arrays.java" />
      <jump line="15" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/main/java/JunitDemo/MyList.java" />
      <jump line="63" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/src/test/java/JunitDemo/WatchmanTest.java" />
      <jump line="0" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/junit4/.gitignore" />
      <jump line="4" column="43" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/rest/HttpbinAPI.java" />
      <jump line="28" column="54" filename="$USER_HOME$/etc/losFiles/projects/Java/miniProgram/pom.xml" />
      <jump line="42" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/com/losyear/retrofit_swagger/dao/response/Result.java" />
      <jump line="40" column="16" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/log4j2.xml" />
      <jump line="29" column="22" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/log4j2.yaml" />
      <jump line="37" column="13" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/log4j2.yaml" />
      <jump line="40" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/Example.java" />
      <jump line="130" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/java/SpringfoxExample.java" />
      <jump line="99" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/pom.xml" />
      <jump line="2" column="17" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/src/main/resources/data.sql" />
      <jump line="109" column="20" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/pom.xml" />
      <jump line="132" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/retrofit_swagger/pom.xml" />
      <jump line="1451" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/guavademo/src/main/java/Guava/ArrayBlockingQueue.java" />
      <jump line="406" column="0" filename="$USER_HOME$/etc/losFiles/projects/perfect/demos/guavademo/src/main/java/Guava/ArrayBlockingQueue.java" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="-" type="4">
        <text>&quot;Argument was %s but expected nonnegative&quot;);</text>
      </register>
      <register name="/" type="4">
        <text>countr</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgICAgICBjaGVja0FyZ3VtZW50KGE+MCwiQXJndW1lbnQgd2FzICVzIGJ1dCBleHBlY3RlZCBub25uZWdhdGl2ZSIsIGEpOwo=</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">cGFja2FnZSBqYXZhLnV0aWwuY29uY3VycmVudDsK</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">cHVibGljIGNsYXNzIEFycmF5QmxvY2tpbmdRdWV1ZSB7Cgp9Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICAgICBqYXZhLnV0aWwuZnVuY3Rpb24uCg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICAgQ2FsbGFiCg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICBPcHRpb25hbC5mcm9tSmF2YVV0aWwoKQo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAgICBqYXZhLnV0aWwuT3B0aW9uYWwuZW0K</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgICAgICBPcHRpb25hbC5hYgo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgICBpbnRlZ2VyT3B0aW9uYWwuZnIK</text>
      </register>
    </registers>
    <search>
      <last-search>countr</last-search>
      <last-offset />
      <last-pattern>countr</last-pattern>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry>version</entry>
        <entry>war</entry>
        <entry>ju</entry>
        <entry>jui</entry>
        <entry>array</entry>
        <entry>Array</entry>
        <entry>matri</entry>
        <entry>Sol</entry>
        <entry>done</entry>
        <entry>while</entry>
        <entry>await</entry>
        <entry>iml</entry>
        <entry>misc</entry>
        <entry>plugin</entry>
        <entry>plug</entry>
        <entry>jar</entry>
        <entry>retrofit</entry>
        <entry>debug</entry>
        <entry>conne</entry>
        <entry>countr</entry>
      </history-search>
      <history-cmd />
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>